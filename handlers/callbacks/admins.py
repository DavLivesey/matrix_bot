from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
import logging, operator
from config import ADMIN_LIST, ADMIN_CHAT
from states import Worker, Ex_Worker, Edit_Worker
from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from keyboards.admins_keys import admin_keyboard, AdminCallback, AdminDeleteCallback
from handlers.main import DBCommands
from loader import bot
from aiogram.enums import ParseMode

database = DBCommands()

items = {
    'yes': "‚úÖ ",
    'no': "üö´ "
}

calls = {
    'rm': "rm_",
    'plus': "plus_"
}

logging.basicConfig(format=u'%(filename)s [LINE:%(line–ù–µ—Ç)d] #%(levelname)-8s'
                           u'[%(asctime)s]  %(message)s',
                    level=logging.INFO)



admins_router = Router(name=__name__)
admins_del_router = Router(name=__name__)


@admins_router.callback_query((AdminCallback.filter(F.text == "cancel")))
async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info("–û—Ç–º–µ–Ω–µ–Ω–æ %r", current_state)
    await state.clear()
    await call.message.answer(
        text='–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã, –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_keyboard
    )

@admins_router.callback_query(AdminCallback.filter(F.text == "add_worker"))
async def create_new_worker(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Worker.name)
    await call.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                         reply_markup=types.ReplyKeyboardRemove()
                         )

@admins_router.message(Worker.name)
async def add_info_sys(message: types.Message, state: FSMContext):
    await database.add_new_worker(message.text)
    user = message.from_user.id
    autor = message.from_user
    await bot.send_message(chat_id=ADMIN_CHAT, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {autor.first_name} "\
                            f"{autor.last_name} –ø–æ–¥ –Ω–∏–∫–æ–º @{autor.username} —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ {message.text}",
                              parse_mode=ParseMode.HTML)
    person_data = await database.check_worker(message.text, user)
    await state.update_data(id=person_data[0])
    items_list = []
    calls_list = []
    for acc in person_data[1::]:
        if acc == '–î–∞':
            items_list.append(items['yes'])
            calls_list.append(calls['rm'])
        else:
            items_list.append(items['no'])
            calls_list.append(calls['plus'])
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=
                          [
                              [
                              InlineKeyboardButton(text=f"{items_list[0]} –ê–ø—Ç–µ–∫–∞",callback_data=AdminCallback(text=f"{calls_list[0]}apteka").pack()),
                              InlineKeyboardButton(text=f"{items_list[1]}–ö–∞–¥—Ä—ã",callback_data=AdminCallback(text=f"{calls_list[1]}zkgu").pack()),
                              InlineKeyboardButton(text=f"{items_list[2]}–ë–ì–£ 1.0",callback_data=AdminCallback(text=f"{calls_list[2]}bgu1").pack()),
                              InlineKeyboardButton(text=f"{items_list[3]}–ë–ì–£ 2.0",callback_data=AdminCallback(text=f"{calls_list[3]}bgu2").pack()),
                              ],
                              [
                              InlineKeyboardButton(text=f"{items_list[4]}–î–∏–µ—Ç–ø–∏—Ç–∞–Ω–∏–µ",callback_data=AdminCallback(text=f"{calls_list[4]}dieta").pack()),
                              InlineKeyboardButton(text=f"{items_list[5]}–ú–ò–°",callback_data=AdminCallback(text=f"{calls_list[5]}mis").pack()),
                              InlineKeyboardButton(text=f"{items_list[6]}–¢–ò–°",callback_data=AdminCallback(text=f"{calls_list[6]}tis").pack()),
                              InlineKeyboardButton(text=f"{items_list[7]}–°–≠–î",callback_data=AdminCallback(text=f"{calls_list[7]}sed").pack()),
                              ],
                              [
                              InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ",callback_data=AdminCallback(text="complete").pack()),
                              InlineKeyboardButton(text="–í –Ω–∞—á–∞–ª–æ",callback_data=AdminCallback(text="cancel").pack())
                              ]
                          ]
                          )
    )

@admins_del_router.callback_query(AdminDeleteCallback.filter(F.text == "delete_worker"))
async def check_worker_name(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Ex_Worker.name)
    await call.message.answer(text="–ö–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=types.ReplyKeyboardRemove()
                         )

@admins_del_router.message(Ex_Worker.name)
async def get_id_for_names(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    buttons = []
    bool_worker = await database.view_worker_with_id(message.text, chat_id)
    autor = message.from_user
    await bot.send_message(chat_id=ADMIN_CHAT, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {autor.first_name} "\
                            f"{autor.last_name} –ø–æ–¥ –Ω–∏–∫–æ–º @{autor.username} —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ {message.text}",
                              parse_mode=ParseMode.HTML)
    if bool_worker != False:
        for person in bool_worker:
            buttons.append(InlineKeyboardButton(text=f"{person}",callback_data=AdminCallback(text=f"{person}").pack()))
        await state.set_state(Ex_Worker.id)
        await message.answer(
            text='–ù–∞–∂–º–∏—Ç–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                               [
                                                                   buttons
                                                               ])
                                                               )
    else:
        await message.answer(text="–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥",
                     reply_markup=types.ReplyKeyboardRemove()
                     )

@admins_del_router.callback_query(Ex_Worker.id)
async def get_id_for_names(call: types.CallbackQuery):
    result = await database.del_worker(call.data[6::])
    if result ==True:
        await call.message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=admin_keyboard)
    else:
        await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=admin_keyboard)

@admins_router.callback_query(AdminCallback.filter(F.text == 'end_sert'))
async def get_ending_serts(call: types.CallbackQuery):
    chat_id = call.from_user.id
    await database.sert_ends(chat_id)
    await call.message.answer(text='–ü–æ–∏—Å–∫ –æ–∫–æ–Ω—á–µ–Ω', reply_markup=admin_keyboard
                       )

@admins_router.callback_query(AdminCallback.filter(F.text == 'edit_dep'))
async def add_dep(call: types.CallbackQuery, state:FSMContext):
    await state.set_state(Worker.department)
    await call.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è",
                     reply_markup=types.ReplyKeyboardRemove()
                       )

@admins_router.message(Worker.department)
async def add_dep(message: types.Message, state:FSMContext):
    chat_id = message.from_user.id
    data = await state.get_data()
    worker_id = data['id']
    worker_dep = message.text
    await database.add_department(worker_id, chat_id, worker_dep)
    await message.answer(text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=admin_keyboard
                       )

@admins_router.callback_query(AdminCallback.filter(F.text == 'edit_phone'))
async def add_dep(call: types.CallbackQuery, state:FSMContext):
    await state.set_state(Worker.phone)
    await call.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                     reply_markup=types.ReplyKeyboardRemove()
                        )

@admins_router.message(Worker.phone)
async def add_dep(message: types.Message, state:FSMContext):
    data = await state.get_data()
    worker_id = data['id']
    worker_phone = message.text
    await database.add_telephone(worker_id, worker_phone)
    await message.answer(text='–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_keyboard
                       )